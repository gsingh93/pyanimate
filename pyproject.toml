[tool.black]
extend-exclude = "typesafety"

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
]
ignore = [
    "A003",
    "E402",
    "E501",
    "E731",
    "E741", # Ambiguous variable name
    "F405",
    "F811",
    "F821",
    "F841",
    "W505",
]
line-length = 88
select = [
    "A",
    "E",
    "F",
    "W",
]

[tool.pytest.ini_options]

[tool.mypy]
strict_optional = false
check_untyped_defs = true
allow_untypned_globals = true
allow_redefinition = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
show_error_context = true
pretty = true
show_error_codes = true
incremental = false
disable_error_code = [
    # https://github.com/python/mypy/issues/6232
    "assignment"
]

enable_incomplete_feature = ["TypeVarTuple"]

[tool.pyright]
exclude = [
    "**/flycheck_.*",
    "**/__pycache__",
]

[tool.isort]
profile = "black"
known_third_party = ["PIL"]

[tool.coverage.run]
source = ["src/pyanimate"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "@(abc\\.)?abstractmethod",
    "@property",
    "@[a-z0-9_]+\\.setter",
    "except ImportError",
]

[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = true

disable = [
    "design", # TODO: disable explicit checks

    # basic
    "invalid-name",
    "missing-class-docstring",
    "missing-function-docstring",
    "missing-module-docstring",

    # classes
    "arguments-renamed",
    "protected-access",

    # exceptions
    "broad-except",
    "raise-missing-from",

    # format
    "line-too-long",

    # imports
    "import-outside-toplevel",
    "wrong-import-position",

    # lambda-expressions
    "unnecessary-lambda-assignment",

    # miscellaneous
    "fixme",

    # refactoring
    "redefined-argument-from-local",
    "no-else-return",

    # stdlib
    "unspecified-encoding",

    # typecheck
    "no-member",
    "keyword-arg-before-vararg",
    "unsubscriptable-object", # Shape class

    # variables
    "possibly-unused-variable",
    "redefined-outer-name",
    "global-statement",
    "unused-wildcard-import",
]


# Files or directories to be skipped. They should be base names, not paths.
ignore = [".git", "__pycache__", ".mypy_cache", ".pytest_cache"]
ignore-patterns = ["flycheck_.*"]

# List of module names for which member attributes should not be checked (useful
# for modules/projects where namespaces are manipulated during runtime and thus
# existing member attributes cannot be deduced by static analysis). It supports
# qualified module names, as well as Unix pattern matching.
ignored-modules = []

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 0

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

# Pickle collected data for later comparisons.
persistent = true

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.11"

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 5

# Maximum number of attributes for a class (see R0902).
max-attributes = 7

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 12

# Maximum number of locals for function / method body.
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.format]
# Maximum number of lines in a module.
max-module-lines = 1000

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = ["HIGH", "CONTROL_FLOW", "INFERENCE", "INFERENCE_FAILURE", "UNDEFINED"]

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 6

[tool.pylint.reports]
output-format = "colorized"

[tool.poetry]
name = "pyanimate"
version = "0.1.0"
description = ""
authors = ["Gulshan Singh <gsingh2011@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [
    { include = "pyanimate", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.11"
kiwisolver = "^1.4.5"
Pillow = "^10.1.0"

[tool.poetry.group.dev.dependencies]
black = ">=23.3.0,<23.4.0"
coverage = ">=7.2.6,<7.3.0"
isort = ">=5.12.0,<5.13.0"
mypy = ">=1.3.0,<1.4.0"
pylint = ">=2.17.4,<2.18.0"
pyright = ">=1.1.310,<1.2.0"
pytest = ">=7.3.1,<7.4.0"
pytest-cov = ">=4.0.0,<4.1.0"
pytest-dependency = ">=0.5.1,<0.6.0"
pytest-pyright = ">=0.0.3,<0.1.0"
rich = ">=13.3.5,<13.4.0"
ruff = ">=0.0.269,<0.1.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
